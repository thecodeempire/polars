(function() {var implementors = {};
implementors["polars"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a UInt8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a UInt16Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a UInt32Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a UInt64Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Int8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Int16Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Int32Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Int64Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Float32Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Float64Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a BooleanChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Date32Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Date64Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Time32MillisecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Time32SecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Time64MicrosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a Time64NanosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a DurationMillisecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a DurationSecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a DurationMicrosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a DurationNanosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a TimestampMillisecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a TimestampSecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a TimestampMicrosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a TimestampNanosecondChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a IntervalDayTimeChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Series&gt; for &amp;'a IntervalYearMonthChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a ChunkedArray&lt;Utf8Type&gt;&gt; for Vec&lt;Option&lt;&amp;'a str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Utf8Type&gt;&gt; for Vec&lt;Option&lt;String&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a ChunkedArray&lt;BooleanType&gt;&gt; for Vec&lt;Option&lt;bool&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;BooleanType&gt;&gt; for Vec&lt;Option&lt;bool&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a ChunkedArray&lt;T&gt;&gt; for Vec&lt;Option&lt;T::Native&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a ChunkedArray&lt;T&gt;: IntoIterator&lt;Item = Option&lt;T::Native&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ChunkedArray&lt;T&gt;: ChunkOps,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;ArrowError&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;UInt8Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;UInt16Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;UInt32Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;UInt64Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Int8Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Int16Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Int32Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Int64Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Float32Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Float64Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Utf8Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;BooleanType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Date32Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Date64Type&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Time32MillisecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Time32SecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Time64NanosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Time64MicrosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;DurationNanosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;DurationMicrosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;DurationMillisecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;DurationSecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;IntervalDayTimeType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;IntervalYearMonthType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;TimestampNanosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;TimestampMicrosecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;TimestampMillisecondType&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;TimestampSecondType&gt;&gt; for Series","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()