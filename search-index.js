var searchIndex = JSON.parse('{\
"polars":{"doc":"Polars DataFrames in Rust","i":[[0,"series","polars","Type agnostic columnar data structure.",null,null],[4,"Series","polars::series","Series The columnar data type for a DataFrame. The Series…",null,null],[13,"UInt8","","",0,null],[13,"UInt16","","",0,null],[13,"UInt32","","",0,null],[13,"UInt64","","",0,null],[13,"Int8","","",0,null],[13,"Int16","","",0,null],[13,"Int32","","",0,null],[13,"Int64","","",0,null],[13,"Float32","","",0,null],[13,"Float64","","",0,null],[13,"Utf8","","",0,null],[13,"Bool","","",0,null],[13,"Date32","","",0,null],[13,"Date64","","",0,null],[13,"Time32Millisecond","","",0,null],[13,"Time32Second","","",0,null],[13,"Time64Nanosecond","","",0,null],[13,"Time64Microsecond","","",0,null],[13,"DurationNanosecond","","",0,null],[13,"DurationMicrosecond","","",0,null],[13,"DurationMillisecond","","",0,null],[13,"DurationSecond","","",0,null],[13,"IntervalDayTime","","",0,null],[13,"IntervalYearMonth","","",0,null],[13,"TimestampNanosecond","","",0,null],[13,"TimestampMicrosecond","","",0,null],[13,"TimestampMillisecond","","",0,null],[13,"TimestampSecond","","",0,null],[11,"sum","","Returns `None` if the array is empty or only contains null…",0,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",0,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",0,[[],["option",4]]],[11,"mean","","",0,[[],["option",4]]],[8,"NamedFrom","","",null,null],[10,"new","","Initialize by name and values.",1,[[]]],[11,"from_chunked_array","","",0,[[["chunkedarray",3],["polarsdatatype",8]]]],[11,"chunk_lengths","","Get the lengths of the underlying chunks",0,[[],["vec",3]]],[11,"name","","Name of series.",0,[[]]],[11,"rename","","Rename series.",0,[[]]],[11,"field","","Get field (used in schema)",0,[[],["field",3]]],[11,"dtype","","Get datatype of series.",0,[[],["arrowdatatype",4]]],[11,"chunks","","Underlying chunks.",0,[[],["vec",3]]],[11,"n_chunks","","No. of chunks",0,[[]]],[11,"i8","","",0,[[],[["int8chunked",6],["result",6]]]],[11,"i16","","",0,[[],[["int16chunked",6],["result",6]]]],[11,"i32","","Unpack to ChunkedArray `# use polars::prelude::*; let s:…",0,[[],[["int32chunked",6],["result",6]]]],[11,"i64","","Unpack to ChunkedArray",0,[[],[["int64chunked",6],["result",6]]]],[11,"f32","","Unpack to ChunkedArray",0,[[],[["result",6],["float32chunked",6]]]],[11,"f64","","Unpack to ChunkedArray",0,[[],[["float64chunked",6],["result",6]]]],[11,"u8","","Unpack to ChunkedArray",0,[[],[["uint8chunked",6],["result",6]]]],[11,"u16","","Unpack to ChunkedArray",0,[[],[["result",6],["uint16chunked",6]]]],[11,"u32","","Unpack to ChunkedArray",0,[[],[["uint32chunked",6],["result",6]]]],[11,"u64","","Unpack to ChunkedArray",0,[[],[["result",6],["uint64chunked",6]]]],[11,"bool","","Unpack to ChunkedArray",0,[[],[["booleanchunked",6],["result",6]]]],[11,"utf8","","Unpack to ChunkedArray",0,[[],[["result",6],["utf8chunked",6]]]],[11,"date32","","Unpack to ChunkedArray",0,[[],[["result",6],["date32chunked",6]]]],[11,"date64","","Unpack to ChunkedArray",0,[[],[["date64chunked",6],["result",6]]]],[11,"time32_millisecond","","Unpack to ChunkedArray",0,[[],[["result",6],["time32millisecondchunked",6]]]],[11,"time32_second","","Unpack to ChunkedArray",0,[[],[["result",6],["time32secondchunked",6]]]],[11,"time64_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["time64nanosecondchunked",6]]]],[11,"time64_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["time64microsecondchunked",6]]]],[11,"duration_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["durationnanosecondchunked",6]]]],[11,"duration_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["durationmicrosecondchunked",6]]]],[11,"duration_millisecond","","Unpack to ChunkedArray",0,[[],[["durationmillisecondchunked",6],["result",6]]]],[11,"duration_second","","Unpack to ChunkedArray",0,[[],[["durationsecondchunked",6],["result",6]]]],[11,"timestamp_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampnanosecondchunked",6]]]],[11,"timestamp_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampmicrosecondchunked",6]]]],[11,"timestamp_millisecond","","Unpack to ChunkedArray",0,[[],[["timestampmillisecondchunked",6],["result",6]]]],[11,"timestamp_second","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampsecondchunked",6]]]],[11,"interval_daytime","","Unpack to ChunkedArray",0,[[],[["intervaldaytimechunked",6],["result",6]]]],[11,"interval_year_month","","Unpack to ChunkedArray",0,[[],[["intervalyearmonthchunked",6],["result",6]]]],[11,"append_array","","",0,[[["arrayref",6]],["result",6]]],[11,"limit","","Take `num_elements` from the top as a zero copy view.",0,[[],["result",6]]],[11,"slice","","Get a zero copy view of the data.",0,[[],["result",6]]],[11,"append","","Append a Series of the same type in place.",0,[[],["result",6]]],[11,"filter","","Filter by boolean mask. This operation clones data.",0,[[["booleanchunked",6],["asref",8]],["result",6]]],[11,"take_iter","","Take by index from an iterator. This operation clones the…",0,[[["option",4]],["result",6]]],[11,"take_opt_iter","","Take by index from an iterator. This operation clones the…",0,[[["option",4]],["result",6]]],[11,"take","","Take by index. This operation is clone.",0,[[],["result",6]]],[11,"len","","Get length of series.",0,[[]]],[11,"rechunk","","Aggregate all chunks to a contiguous array of memory.",0,[[["option",4]],["result",6]]],[11,"head","","Get the head of the Series.",0,[[["option",4]]]],[11,"tail","","Get the tail of the Series.",0,[[["option",4]]]],[11,"cast","","Cast to some primitive type.",0,[[],["result",6]]],[11,"get","","Get a single value by index. Don\'t use this operation for…",0,[[],["anytype",4]]],[11,"sort_in_place","","Sort in place.",0,[[]]],[11,"sort","","",0,[[]]],[11,"argsort","","Retrieve the indexes needed for a sort.",0,[[],["vec",3]]],[11,"null_count","","Count the null values.",0,[[]]],[11,"unique","","Get unique values in the Series.",0,[[]]],[11,"arg_unique","","Get first indexes of unique values.",0,[[],["vec",3]]],[11,"is_null","","Get a mask of the null values.",0,[[],["booleanchunked",6]]],[11,"null_bits","","Get the bits that represent the null values of the…",0,[[],["vec",3]]],[11,"reverse","","return a Series in reversed order",0,[[]]],[11,"as_single_ptr","","Rechunk and return a pointer to the start of the Series.…",0,[[]]],[0,"chunked_array","polars","The typed heart of every Series column.",null,null],[3,"ChunkedArray","polars::chunked_array","ChunkedArray",null,null],[0,"aggregate","","",null,null],[8,"Agg","polars::chunked_array::aggregate","",null,null],[10,"sum","","",2,[[],["option",4]]],[10,"min","","",2,[[],["option",4]]],[10,"max","","",2,[[],["option",4]]],[0,"apply","polars::chunked_array","",null,null],[8,"Apply","polars::chunked_array::apply","",null,null],[10,"apply","","",3,[[]]],[0,"arithmetic","polars::chunked_array","",null,null],[8,"Pow","polars::chunked_array::arithmetic","",null,null],[10,"pow_f32","","",4,[[],["float32chunked",6]]],[10,"pow_f64","","",4,[[],["float64chunked",6]]],[0,"builder","polars::chunked_array","",null,null],[3,"PrimitiveChunkedBuilder","polars::chunked_array::builder","",null,null],[12,"builder","","",5,null],[3,"Utf8ChunkedBuilder","","",null,null],[12,"builder","","",6,null],[3,"AlignedVec","","",null,null],[12,"0","","",7,null],[5,"build_primitive_ca_with_opt","","",null,[[],["chunkedarray",3]]],[5,"build_with_existing_null_bitmap_and_slice","","Take an existing slice and a null bitmap and construct an…",null,[[["option",4],["buffer",3]],["primitivearray",3]]],[5,"get_bitmap","","Get the null count and the null bitmap of the arrow array",null,[[]]],[5,"round_upto_multiple_of_64","","Returns the nearest number that is `>=` than `num` and is…",null,[[]]],[5,"aligned_vec_to_primitive_array","","Take an owned Vec that is 64 byte aligned and create a…",null,[[["alignedvec",3],["option",4],["buffer",3]],[["arrowprimitivetype",8],["primitivearray",3]]]],[8,"AlignedAlloc","","",null,null],[10,"with_capacity_aligned","","",8,[[],["vec",3]]],[11,"new","","",5,[[]]],[11,"new_from_iter","","",5,[[],["chunkedarray",3]]],[11,"finish","","",5,[[],["chunkedarray",3]]],[11,"new","","",6,[[]]],[11,"append_option","","",6,[[["option",4],["asref",8]]]],[11,"new_from_iter","","",6,[[],["utf8chunked",6]]],[11,"finish","","",6,[[],["utf8chunked",6]]],[11,"new","","",7,[[["vec",3]],["result",6]]],[11,"into_inner","","",7,[[],["vec",3]]],[0,"cast","polars::chunked_array","",null,null],[8,"ChunkCast","polars::chunked_array::cast","",null,null],[10,"cast","","",9,[[],[["chunkedarray",3],["result",6]]]],[0,"chunkops","polars::chunked_array","",null,null],[8,"ChunkOps","polars::chunked_array::chunkops","",null,null],[10,"rechunk","","Aggregate to chunk id. A chunk id is a vector of the chunk…",10,[[["option",4]],["result",6]]],[10,"optional_rechunk","","Only rechunk if lhs and rhs don\'t match",10,[[["chunkedarray",3]],[["option",4],["result",6]]]],[0,"comparison","polars::chunked_array","",null,null],[8,"CmpOps","polars::chunked_array::comparison","Compare Series",null,null],[10,"eq","","Check for equality.",11,[[],["booleanchunked",6]]],[10,"neq","","Check for inequality.",11,[[],["booleanchunked",6]]],[10,"gt","","Greater than comparison.",11,[[],["booleanchunked",6]]],[10,"gt_eq","","Greater than or equal comparison.",11,[[],["booleanchunked",6]]],[10,"lt","","Less than comparison.",11,[[],["booleanchunked",6]]],[10,"lt_eq","","Less than or equal comparison",11,[[],["booleanchunked",6]]],[8,"NumComp","","",null,null],[0,"iterator","polars::chunked_array","",null,null],[3,"NumIterSingleChunkNullCheck","polars::chunked_array::iterator","Single chunk with null values",null,null],[3,"NumIterSingleChunk","","Single chunk no null values",null,null],[3,"NumIterManyChunk","","Many chunks no null checks",null,null],[3,"NumIterManyChunkNullCheck","","Many chunks with null checks",null,null],[3,"Utf8IterSingleChunk","","No null checks",null,null],[3,"Utf8IterSingleChunkNullCheck","","",null,null],[3,"Utf8IterManyChunk","","Many chunks no nulls",null,null],[3,"Utf8IterManyChunkNullCheck","","Many chunks no nulls",null,null],[3,"BooleanIterSingleChunk","","No null checks",null,null],[3,"BooleanIterSingleChunkNullCheck","","",null,null],[3,"BooleanIterManyChunk","","Many chunks no nulls",null,null],[3,"BooleanIterManyChunkNullCheck","","Many chunks no nulls",null,null],[8,"ExactSizeDoubleEndedIterator","","",null,null],[0,"take","polars::chunked_array","Traits to provide fast Random access to ChunkedArrays…",null,null],[3,"NumTakeRandomChunked","polars::chunked_array::take","",null,null],[3,"NumTakeRandomCont","","",null,null],[3,"NumTakeRandomSingleChunk","","",null,null],[3,"Utf8TakeRandom","","",null,null],[3,"Utf8TakeRandomSingleChunk","","",null,null],[3,"BoolTakeRandom","","",null,null],[3,"BoolTakeRandomSingleChunk","","",null,null],[8,"Take","","",null,null],[10,"take","","Take values from ChunkedArray by index.",12,[[["option",4]],["result",6]]],[10,"take_opt","","Take values from ChunkedArray by Option.",12,[[["option",4]],["result",6]]],[8,"TakeIndex","","",null,null],[10,"as_take_iter","","",13,[[],[["box",3],["iterator",8]]]],[11,"as_opt_take_iter","","",13,[[],[["box",3],["iterator",8]]]],[10,"take_index_len","","",13,[[]]],[8,"IntoTakeRandom","","",null,null],[16,"Item","","",14,null],[10,"take_rand","","",14,[[],[["box",3],["takerandom",8]]]],[8,"TakeRandom","","",null,null],[16,"Item","","",15,null],[10,"get","","",15,[[],["option",4]]],[10,"get_unchecked","","",15,[[]]],[0,"temporal","polars::chunked_array","",null,null],[5,"date32_as_datetime","polars::chunked_array::temporal","",null,[[],["naivedatetime",3]]],[5,"date64_as_datetime","","",null,[[],["naivedatetime",3]]],[5,"time64_nanosecond_as_time","","",null,[[],["naivetime",3]]],[5,"time64_microsecond_as_time","","",null,[[],["naivetime",3]]],[5,"time32_second_as_time","","",null,[[],["naivetime",3]]],[5,"time32_millisecond_as_time","","",null,[[],["naivetime",3]]],[0,"unique","polars::chunked_array","",null,null],[8,"Unique","polars::chunked_array::unique","",null,null],[10,"unique","","Get unique values of a ChunkedArray",16,[[],["chunkedarray",3]]],[10,"arg_unique","","Get first index of the unique values in a ChunkedArray.",16,[[],["vec",3]]],[8,"ValueCounts","","",null,null],[10,"value_counts","","",17,[[],[["option",4],["buildhasherdefault",3],["hashmap",3]]]],[0,"upstream_traits","polars::chunked_array","Implementations of upstream traits for ChunkedArray",null,null],[8,"Downcast","","",null,null],[10,"downcast_chunks","","",18,[[],["vec",3]]],[8,"ChunkSort","","",null,null],[10,"sort","","",19,[[],["chunkedarray",3]]],[10,"sort_in_place","","",19,[[]]],[10,"argsort","","",19,[[],["vec",3]]],[8,"ChunkFull","","Fill a ChunkedArray with one value.",null,null],[10,"full","","Create a ChunkedArray with a single value.",20,[[]]],[8,"Reverse","","",null,null],[10,"reverse","","",21,[[],["chunkedarray",3]]],[11,"new_from_chunks","","Create a new ChunkedArray from existing chunks.",22,[[["vec",3],["arrayref",6]]]],[11,"null_bits","","Get the null count and the buffer of bits representing…",22,[[],["vec",3]]],[11,"into_series","","Wrap as Series",22,[[],["series",4]]],[11,"chunk_id","","",22,[[],["vec",3]]],[11,"chunks","","A reference to the chunks",22,[[],["vec",3]]],[11,"null_count","","Count the null values.",22,[[]]],[11,"is_null","","Get a mask of the null values.",22,[[],["booleanchunked",6]]],[11,"u8","","Downcast generic `ChunkedArray<T>` to u8.",22,[[],[["uint8chunked",6],["result",6]]]],[11,"u16","","Downcast generic `ChunkedArray<T>` to u16.",22,[[],[["result",6],["uint16chunked",6]]]],[11,"u32","","Downcast generic `ChunkedArray<T>` to u32.",22,[[],[["uint32chunked",6],["result",6]]]],[11,"u64","","Downcast generic `ChunkedArray<T>` to u64.",22,[[],[["uint64chunked",6],["result",6]]]],[11,"i8","","Downcast generic `ChunkedArray<T>` to i8.",22,[[],[["result",6],["int8chunked",6]]]],[11,"i16","","Downcast generic `ChunkedArray<T>` to i16.",22,[[],[["result",6],["int16chunked",6]]]],[11,"i32","","Downcast generic `ChunkedArray<T>` to i32.",22,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Downcast generic `ChunkedArray<T>` to i64.",22,[[],[["int64chunked",6],["result",6]]]],[11,"f32","","Downcast generic `ChunkedArray<T>` to f32.",22,[[],[["float32chunked",6],["result",6]]]],[11,"f64","","Downcast generic `ChunkedArray<T>` to f64.",22,[[],[["result",6],["float64chunked",6]]]],[11,"bool","","Downcast generic `ChunkedArray<T>` to bool.",22,[[],[["result",6],["booleanchunked",6]]]],[11,"utf8","","Downcast generic `ChunkedArray<T>` to UTF-8 encoded string.",22,[[],[["result",6],["utf8chunked",6]]]],[11,"date32","","Downcast generic `ChunkedArray<T>` to date32.",22,[[],[["result",6],["date32chunked",6]]]],[11,"date64","","Downcast generic `ChunkedArray<T>` to date32.",22,[[],[["date64chunked",6],["result",6]]]],[11,"time32_second","","Downcast generic `ChunkedArray<T>` to time32 with…",22,[[],[["result",6],["time32secondchunked",6]]]],[11,"time32_millisecond","","Downcast generic `ChunkedArray<T>` to time32 with…",22,[[],[["time32millisecondchunked",6],["result",6]]]],[11,"time64_nanosecond","","Downcast generic `ChunkedArray<T>` to time64 with…",22,[[],[["result",6],["time64nanosecondchunked",6]]]],[11,"time64_microsecond","","Downcast generic `ChunkedArray<T>` to time64 with…",22,[[],[["time64microsecondchunked",6],["result",6]]]],[11,"duration_nanosecond","","Downcast generic `ChunkedArray<T>` to duration with…",22,[[],[["result",6],["durationnanosecondchunked",6]]]],[11,"duration_microsecond","","Downcast generic `ChunkedArray<T>` to duration with…",22,[[],[["durationmicrosecondchunked",6],["result",6]]]],[11,"duration_second","","Downcast generic `ChunkedArray<T>` to duration with…",22,[[],[["result",6],["durationsecondchunked",6]]]],[11,"timestamp_nanosecond","","Downcast generic `ChunkedArray<T>` to timestamp with…",22,[[],[["result",6],["timestampnanosecondchunked",6]]]],[11,"timestamp_microsecond","","Downcast generic `ChunkedArray<T>` to timestamp with…",22,[[],[["timestampmicrosecondchunked",6],["result",6]]]],[11,"timestamp_millisecond","","Downcast generic `ChunkedArray<T>` to timestamp with…",22,[[],[["result",6],["timestampmillisecondchunked",6]]]],[11,"timestamp_second","","Downcast generic `ChunkedArray<T>` to timestamp with…",22,[[],[["timestampsecondchunked",6],["result",6]]]],[11,"limit","","Take a view of top n elements",22,[[],["result",6]]],[11,"filter","","Filter values in the ChunkedArray with a boolean mask.",22,[[["booleanchunked",6]],["result",6]]],[11,"append_array","","Append arrow array in place.",22,[[["arrayref",6]],["result",6]]],[11,"len","","Combined length of all the chunks.",22,[[]]],[11,"get","","Get a single value. Beware this is slow.",22,[[],["anytype",4]]],[11,"slice","","Slice the array. The chunks are reallocated the underlying…",22,[[],["result",6]]],[11,"head","","Get the head of the ChunkedArray",22,[[["option",4]]]],[11,"tail","","Get the tail of the ChunkedArray",22,[[["option",4]]]],[11,"append","","Append in place.",22,[[]]],[11,"new_utf8_from_slice","","",22,[[]]],[11,"new_utf8_from_opt_slice","","",22,[[]]],[11,"name","","Name of the ChunkedArray.",22,[[]]],[11,"ref_field","","Get a reference to the field.",22,[[],["field",3]]],[11,"rename","","Rename this ChunkedArray.",22,[[]]],[11,"new_from_slice","","",22,[[]]],[11,"new_from_opt_slice","","",22,[[]]],[11,"new_with_null_bitmap","","Nullify values in slice with an existing null bitmap",22,[[["option",4],["buffer",3]]]],[11,"new_from_owned_with_null_bitmap","","Nullify values in slice with an existing null bitmap",22,[[["alignedvec",3],["option",4],["buffer",3]]]],[11,"cont_slice","","Contiguous slice",22,[[],["result",6]]],[11,"data_views","","Get slices of the underlying arrow data. NOTE: null values…",22,[[],["vec",3]]],[11,"as_single_ptr","","Rechunk and return a ptr to the start of the array",22,[[]]],[11,"map","","If cont_slice is successful a closure is mapped over the…",22,[[],[["result",6],["map",3]]]],[11,"map_null_checks","","If cont_slice fails we can fallback on an iterator with…",22,[[],[["box",3],["map",3]]]],[11,"fold","","If cont_slice is successful a closure can be applied as…",22,[[],["result",6]]],[11,"fold_null_checks","","If cont_slice fails we can fallback on an iterator with…",22,[[]]],[0,"datatypes","polars","Data types supported by Polars",null,null],[4,"ArrowDataType","polars::datatypes","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",23,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",23,null],[13,"Int8","","A signed 8-bit integer.",23,null],[13,"Int16","","A signed 16-bit integer.",23,null],[13,"Int32","","A signed 32-bit integer.",23,null],[13,"Int64","","A signed 64-bit integer.",23,null],[13,"UInt8","","An unsigned 8-bit integer.",23,null],[13,"UInt16","","An unsigned 16-bit integer.",23,null],[13,"UInt32","","An unsigned 32-bit integer.",23,null],[13,"UInt64","","An unsigned 64-bit integer.",23,null],[13,"Float16","","A 16-bit floating point number.",23,null],[13,"Float32","","A 32-bit floating point number.",23,null],[13,"Float64","","A 64-bit floating point number.",23,null],[13,"Timestamp","","A timestamp with an optional timezone.",23,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",23,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",23,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",23,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",23,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",23,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",23,null],[13,"Binary","","Opaque binary data of variable length.",23,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",23,null],[13,"LargeBinary","","Opaque binary data of variable length and 64-bit offsets.",23,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",23,null],[13,"LargeUtf8","","A variable-length string in Unicode with UFT-8 encoding…",23,null],[13,"List","","A list of some logical data type with variable length.",23,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",23,null],[13,"LargeList","","A list of some logical data type with variable length and…",23,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",23,null],[13,"Union","","A nested datatype that can represent slots of differing…",23,null],[13,"Dictionary","","A dictionary array where each element is a single value…",23,null],[8,"ArrowNumericType","","",null,null],[8,"ArrowPrimitiveType","","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",24,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",24,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",24,[[]]],[10,"default_value","","Returns a default value of this primitive type.",24,[[]]],[3,"BooleanType","","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",25,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",25,null],[3,"DurationMicrosecondType","","",null,null],[3,"DurationMillisecondType","","",null,null],[3,"DurationNanosecondType","","",null,null],[3,"DurationSecondType","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"Int16Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Int8Type","","",null,null],[3,"IntervalDayTimeType","","",null,null],[4,"IntervalUnit","","YEAR_MONTH or DAY_TIME interval in SQL style.",null,null],[13,"YearMonth","","Indicates the number of elapsed whole months, stored as…",26,null],[13,"DayTime","","Indicates the number of elapsed days and milliseconds,…",26,null],[3,"IntervalYearMonthType","","",null,null],[3,"Time32MillisecondType","","",null,null],[3,"Time32SecondType","","",null,null],[3,"Time64MicrosecondType","","",null,null],[3,"Time64NanosecondType","","",null,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",27,null],[13,"Millisecond","","Time in milliseconds.",27,null],[13,"Microsecond","","Time in microseconds.",27,null],[13,"Nanosecond","","Time in nanoseconds.",27,null],[3,"TimestampMicrosecondType","","",null,null],[3,"TimestampMillisecondType","","",null,null],[3,"TimestampNanosecondType","","",null,null],[3,"TimestampSecondType","","",null,null],[3,"UInt16Type","","",null,null],[3,"UInt32Type","","",null,null],[3,"UInt64Type","","",null,null],[3,"UInt8Type","","",null,null],[3,"Utf8Type","","",null,null],[4,"AnyType","","",null,null],[13,"Null","","",28,null],[13,"Boolean","","A binary true or false.",28,null],[13,"Utf8","","A UTF8 encoded string type.",28,null],[13,"UInt8","","An unsigned 8-bit integer number.",28,null],[13,"UInt16","","An unsigned 16-bit integer number.",28,null],[13,"UInt32","","An unsigned 32-bit integer number.",28,null],[13,"UInt64","","An unsigned 64-bit integer number.",28,null],[13,"Int8","","An 8-bit integer number.",28,null],[13,"Int16","","A 16-bit integer number.",28,null],[13,"Int32","","A 32-bit integer number.",28,null],[13,"Int64","","A 64-bit integer number.",28,null],[13,"Float32","","A 32-bit floating point number.",28,null],[13,"Float64","","A 64-bit floating point number.",28,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",28,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",28,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",28,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",28,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",28,null],[13,"TimeStamp","","",28,null],[13,"IntervalDayTime","","",28,null],[13,"IntervalYearMonth","","",28,null],[6,"BooleanChunked","","",null,null],[6,"UInt8Chunked","","",null,null],[6,"UInt16Chunked","","",null,null],[6,"UInt32Chunked","","",null,null],[6,"UInt64Chunked","","",null,null],[6,"Int8Chunked","","",null,null],[6,"Int16Chunked","","",null,null],[6,"Int32Chunked","","",null,null],[6,"Int64Chunked","","",null,null],[6,"Float32Chunked","","",null,null],[6,"Float64Chunked","","",null,null],[6,"Utf8Chunked","","",null,null],[6,"Date32Chunked","","",null,null],[6,"Date64Chunked","","",null,null],[6,"DurationNanosecondChunked","","",null,null],[6,"DurationMicrosecondChunked","","",null,null],[6,"DurationMillisecondChunked","","",null,null],[6,"DurationSecondChunked","","",null,null],[6,"Time64NanosecondChunked","","",null,null],[6,"Time64MicrosecondChunked","","",null,null],[6,"Time32MillisecondChunked","","",null,null],[6,"Time32SecondChunked","","",null,null],[6,"IntervalDayTimeChunked","","",null,null],[6,"IntervalYearMonthChunked","","",null,null],[6,"TimestampNanosecondChunked","","",null,null],[6,"TimestampMicrosecondChunked","","",null,null],[6,"TimestampMillisecondChunked","","",null,null],[6,"TimestampSecondChunked","","",null,null],[8,"PolarsDataType","","",null,null],[10,"get_data_type","","",29,[[],["arrowdatatype",4]]],[8,"PolarsNumericType","","",null,null],[8,"PolarsIntegerType","","",null,null],[8,"ToStr","","",null,null],[10,"to_str","","",30,[[]]],[0,"error","polars","",null,null],[4,"PolarsError","polars::error","",null,null],[13,"ArrowError","","",31,null],[13,"InvalidOperation","","",31,null],[13,"ChunkMisMatch","","",31,null],[13,"DataTypeMisMatch","","",31,null],[13,"NotFound","","",31,null],[13,"LengthMismatch","","",31,null],[13,"Other","","",31,null],[13,"NoSelection","","",31,null],[13,"OutOfBounds","","",31,null],[13,"NoSlice","","",31,null],[13,"NoData","","",31,null],[13,"MemoryNotAligned","","",31,null],[6,"Result","","",null,null],[0,"frame","polars","DataFrame module",null,null],[3,"DataFrame","polars::frame","",null,null],[0,"group_by","","",null,null],[3,"GroupBy","polars::frame::group_by","",null,null],[12,"by","","",32,null],[11,"groupby","polars::frame","Group DataFrame using a Series column.",33,[[],[["result",6],["groupby",3]]]],[11,"select","polars::frame::group_by","",32,[[]]],[11,"mean","","Aggregate grouped series and compute the mean per group.",32,[[],[["result",6],["dataframe",3]]]],[11,"sum","","Aggregate grouped series and compute the sum per group.",32,[[],[["result",6],["dataframe",3]]]],[11,"min","","Aggregate grouped series and compute the minimal value per…",32,[[],[["result",6],["dataframe",3]]]],[11,"max","","Aggregate grouped series and compute the maximum value per…",32,[[],[["result",6],["dataframe",3]]]],[11,"count","","Aggregate grouped series and compute the number of values…",32,[[],[["result",6],["dataframe",3]]]],[0,"hash_join","polars::frame","",null,null],[8,"HashJoin","polars::frame::hash_join","",null,null],[10,"hash_join_inner","","",34,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_left","","",34,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_outer","","",34,[[["chunkedarray",3]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"inner_join","polars::frame","Perform an inner join on two DataFrames.",33,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[11,"left_join","","Perform a left join on two DataFrames # Example",33,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[11,"outer_join","","Perform an outer join on two DataFrames # Example",33,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[0,"select","","",null,null],[8,"Selection","polars::frame::select","",null,null],[10,"to_selection_vec","","",35,[[],["vec",3]]],[0,"ser","polars::frame","",null,null],[5,"finish_reader","polars::frame::ser","",null,[[["arrowreader",8]],[["result",6],["dataframe",3]]]],[0,"csv","","(De)serializing CSV files",null,null],[3,"ReaderBuilder","polars::frame::ser::csv","CSV file reader builder",null,null],[3,"WriterBuilder","","A CSV writer builder",null,null],[3,"CsvWriter","","Write a DataFrame to csv.",null,null],[3,"CsvReader","","Creates a DataFrame after reading a csv.",null,null],[11,"new","","",36,[[]]],[11,"has_headers","","Set whether to write headers",36,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",36,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",36,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",36,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp formatch array in",36,[[["string",3]]]],[11,"finish","","",36,[[["dataframe",3]],["result",6]]],[11,"with_schema","","Create a new DataFrame by reading a csv file.",37,[[["schema",3],["arc",3]]]],[11,"has_header","","Set whether the CSV file has headers",37,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",37,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",37,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",37,[[]]],[11,"with_projection","","Set the reader\'s column projection",37,[[["vec",3]]]],[0,"json","polars::frame::ser","(De)serialize JSON files.",null,null],[3,"ReaderBuilder","polars::frame::ser::json","JSON file reader builder",null,null],[3,"JsonReader","","",null,null],[11,"with_schema","","Set the JSON file\'s schema",38,[[["schema",3],["arc",3]]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",38,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",38,[[]]],[11,"with_projection","","Set the reader\'s column projection",38,[[["vec",3],["string",3]]]],[8,"SerReader","polars::frame::ser","",null,null],[10,"new","","",39,[[]]],[10,"set_rechunk","","Rechunk to a single chunk after Reading file.",39,[[]]],[10,"finish","","Take the SerReader and return a parsed DataFrame.",39,[[],[["result",6],["dataframe",3]]]],[8,"ArrowReader","","",null,null],[10,"next","","",40,[[],[["arrowresult",6],["option",4]]]],[10,"schema","","",40,[[],[["schema",3],["arc",3]]]],[11,"new","polars::frame","Create a DataFrame from a Vector of Series.",33,[[["vec",3],["series",4]],["result",6]]],[11,"schema","","Get a reference to the DataFrame schema.",33,[[],["arc",3]]],[11,"get_columns","","Get a reference to the DataFrame columns.",33,[[],["vec",3]]],[11,"columns","","Get the column labels of the DataFrame.",33,[[],["vec",3]]],[11,"n_chunks","","The number of chunks per column",33,[[],["result",6]]],[11,"fields","","Get a reference the schema fields of the DataFrame.",33,[[],["vec",3]]],[11,"shape","","Get (width x height)",33,[[]]],[11,"width","","Get width of DataFrame",33,[[]]],[11,"height","","Get height of DataFrame",33,[[]]],[11,"hstack","","Add series column to DataFrame",33,[[],["result",6]]],[11,"drop_in_place","","Remove column by name",33,[[],[["result",6],["series",4]]]],[11,"drop","","Drop a column by name. This is a pure method and will…",33,[[],[["result",6],["dataframe",3]]]],[11,"get","","Get a row in the dataframe. Beware this is slow.",33,[[],[["option",4],["vec",3]]]],[11,"select_idx","","Select a series by index.",33,[[],[["option",4],["series",4]]]],[11,"f_select_idx","","Force select.",33,[[],["series",4]]],[11,"select_idx_mut","","Select a mutable series by index.",33,[[],[["option",4],["series",4]]]],[11,"f_select_idx_mut","","Force select.",33,[[],["series",4]]],[11,"find_idx_by_name","","Get column index of a series by name.",33,[[],["option",4]]],[11,"column","","Select a single column by name.",33,[[],[["option",4],["series",4]]]],[11,"f_column","","Force select a single column.",33,[[],["series",4]]],[11,"select","","Select column(s) from this DataFrame.",33,[[],[["result",6],["dataframe",3]]]],[11,"select_mut","","Select a mutable series by name.",33,[[],[["option",4],["series",4]]]],[11,"f_select_mut","","Force select.",33,[[],["series",4]]],[11,"filter","","Take DataFrame rows by a boolean mask.",33,[[["booleanchunked",6]],["result",6]]],[11,"f_filter","","Force filter",33,[[["booleanchunked",6]]]],[11,"take_iter","","Take DataFrame value by indexes from an iterator.",33,[[["option",4]],["result",6]]],[11,"take_opt_iter","","",33,[[["option",4]],["result",6]]],[11,"take","","Take DataFrame rows by index values.",33,[[],["result",6]]],[11,"f_take","","Force take",33,[[]]],[11,"rename","","Rename a column in the DataFrame",33,[[],["result",6]]],[11,"sort_in_place","","Sort DataFrame in place by a column.",33,[[],["result",6]]],[11,"sort","","",33,[[],["result",6]]],[11,"replace","","Replace a column with a series.",33,[[["series",4]],["result",6]]],[11,"slice","","Slice the DataFrame along the rows.",33,[[],["result",6]]],[11,"head","","Get the head of the DataFrame",33,[[["option",4]]]],[11,"tail","","Get the tail of the DataFrame",33,[[["option",4]]]],[11,"as_record_batches","","Transform the underlying chunks in the DataFrame to Arrow…",33,[[],[["result",6],["vec",3]]]],[11,"reverse","","Get a DataFrame with all the columns in reversed order",33,[[]]],[0,"prelude","polars","Everything you need to get started with Polars",null,null],[8,"ArrowPrimitiveType","polars::prelude","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",24,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",24,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",24,[[]]],[10,"default_value","","Returns a default value of this primitive type.",24,[[]]],[3,"Field","","Contains the meta-data for a single relative type.",null,null],[3,"Schema","","Describes the meta-data of an ordered sequence of relative…",null,null],[8,"LhsNumOps","","",null,null],[16,"Output","","",41,null],[10,"add","","",41,[[]]],[10,"sub","","",41,[[]]],[10,"div","","",41,[[]]],[10,"mul","","",41,[[]]],[0,"testing","polars","",null,null],[11,"series_equal","polars::series","",0,[[["series",4]]]],[11,"frame_equal","polars::frame","",33,[[["dataframe",3]]]],[14,"apply_method_all_series","polars","",null,null],[14,"apply_method_numeric_series","","",null,null],[14,"apply_method_numeric_series_and_return","","",null,null],[14,"exec_concurrent","","",null,null],[14,"apply_operand_on_chunkedarray_by_iter","","",null,null],[11,"from","polars::series","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","polars::chunked_array","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","polars::chunked_array::builder","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","polars::chunked_array::iterator","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"par_bridge","","",42,[[],["iterbridge",3]]],[11,"to_bytes","","",42,[[],["utf8charsplitter",3]]],[11,"to_units","","",42,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",42,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",42,[[],["utf16charmerger",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"par_bridge","","",43,[[],["iterbridge",3]]],[11,"to_bytes","","",43,[[],["utf8charsplitter",3]]],[11,"to_units","","",43,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",43,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",43,[[],["utf16charmerger",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"par_bridge","","",44,[[],["iterbridge",3]]],[11,"to_bytes","","",44,[[],["utf8charsplitter",3]]],[11,"to_units","","",44,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",44,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",44,[[],["utf16charmerger",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"into_iter","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"par_bridge","","",45,[[],["iterbridge",3]]],[11,"to_bytes","","",45,[[],["utf8charsplitter",3]]],[11,"to_units","","",45,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",45,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",45,[[],["utf16charmerger",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"into_iter","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"par_bridge","","",46,[[],["iterbridge",3]]],[11,"to_bytes","","",46,[[],["utf8charsplitter",3]]],[11,"to_units","","",46,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",46,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",46,[[],["utf16charmerger",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"into_iter","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"par_bridge","","",47,[[],["iterbridge",3]]],[11,"to_bytes","","",47,[[],["utf8charsplitter",3]]],[11,"to_units","","",47,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",47,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",47,[[],["utf16charmerger",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"into_iter","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"par_bridge","","",48,[[],["iterbridge",3]]],[11,"to_bytes","","",48,[[],["utf8charsplitter",3]]],[11,"to_units","","",48,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",48,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",48,[[],["utf16charmerger",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"into_iter","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"par_bridge","","",49,[[],["iterbridge",3]]],[11,"to_bytes","","",49,[[],["utf8charsplitter",3]]],[11,"to_units","","",49,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",49,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",49,[[],["utf16charmerger",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"into_iter","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"par_bridge","","",50,[[],["iterbridge",3]]],[11,"to_bytes","","",50,[[],["utf8charsplitter",3]]],[11,"to_units","","",50,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",50,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",50,[[],["utf16charmerger",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"into_iter","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"par_bridge","","",51,[[],["iterbridge",3]]],[11,"to_bytes","","",51,[[],["utf8charsplitter",3]]],[11,"to_units","","",51,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",51,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",51,[[],["utf16charmerger",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"into_iter","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"par_bridge","","",52,[[],["iterbridge",3]]],[11,"to_bytes","","",52,[[],["utf8charsplitter",3]]],[11,"to_units","","",52,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",52,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",52,[[],["utf16charmerger",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"par_bridge","","",53,[[],["iterbridge",3]]],[11,"to_bytes","","",53,[[],["utf8charsplitter",3]]],[11,"to_units","","",53,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",53,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",53,[[],["utf16charmerger",3]]],[11,"from","polars::chunked_array::take","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","polars::datatypes","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"equivalent","","",23,[[]]],[11,"vzip","","",23,[[]]],[11,"get_data_type","","",61,[[],["datatype",4]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"get_data_type","","",62,[[],["datatype",4]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"get_data_type","","",63,[[],["datatype",4]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"equivalent","","",25,[[]]],[11,"vzip","","",25,[[]]],[11,"get_data_type","","",64,[[],["datatype",4]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"get_data_type","","",65,[[],["datatype",4]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"get_data_type","","",66,[[],["datatype",4]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"get_data_type","","",67,[[],["datatype",4]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"get_data_type","","",68,[[],["datatype",4]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"get_data_type","","",69,[[],["datatype",4]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"get_data_type","","",70,[[],["datatype",4]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"get_data_type","","",71,[[],["datatype",4]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"get_data_type","","",72,[[],["datatype",4]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"get_data_type","","",73,[[],["datatype",4]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"get_data_type","","",74,[[],["datatype",4]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"equivalent","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"get_data_type","","",75,[[],["datatype",4]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"get_data_type","","",76,[[],["datatype",4]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"get_data_type","","",77,[[],["datatype",4]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"get_data_type","","",78,[[],["datatype",4]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"get_data_type","","",79,[[],["datatype",4]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"equivalent","","",27,[[]]],[11,"vzip","","",27,[[]]],[11,"get_data_type","","",80,[[],["datatype",4]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"get_data_type","","",81,[[],["datatype",4]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"get_data_type","","",82,[[],["datatype",4]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"get_data_type","","",83,[[],["datatype",4]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"get_data_type","","",84,[[],["datatype",4]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"get_data_type","","",85,[[],["datatype",4]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"get_data_type","","",86,[[],["datatype",4]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"get_data_type","","",87,[[],["datatype",4]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"get_data_type","","",88,[[],["datatype",4]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","polars::error","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","polars::frame","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","polars::frame::group_by","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","polars::frame::ser::csv","",89,[[]]],[11,"into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","polars::frame::ser::json","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","polars::prelude","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"to_string","","",92,[[],["string",3]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"equivalent","","",92,[[]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"to_string","","",93,[[],["string",3]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"equivalent","","",93,[[]]],[11,"vzip","","",93,[[]]],[11,"fmt","","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",93,[[],["schema",3]]],[11,"clone","polars::datatypes","",25,[[],["dateunit",4]]],[11,"clone","polars::prelude","",92,[[],["field",3]]],[11,"clone","polars::datatypes","",23,[[],["datatype",4]]],[11,"clone","","",26,[[],["intervalunit",4]]],[11,"clone","","",27,[[],["timeunit",4]]],[11,"get_data_type","","",62,[[],["datatype",4]]],[11,"get_bit_width","","",62,[[]]],[11,"default_value","","",62,[[]]],[11,"get_data_type","","",76,[[],["datatype",4]]],[11,"get_bit_width","","",76,[[]]],[11,"default_value","","",76,[[]]],[11,"get_data_type","","",74,[[],["datatype",4]]],[11,"get_bit_width","","",74,[[]]],[11,"default_value","","",74,[[]]],[11,"get_data_type","","",61,[[],["datatype",4]]],[11,"get_bit_width","","",61,[[]]],[11,"default_value","","",61,[[]]],[11,"get_data_type","","",82,[[],["datatype",4]]],[11,"get_bit_width","","",82,[[]]],[11,"default_value","","",82,[[]]],[11,"get_data_type","","",77,[[],["datatype",4]]],[11,"get_bit_width","","",77,[[]]],[11,"default_value","","",77,[[]]],[11,"get_data_type","","",65,[[],["datatype",4]]],[11,"get_bit_width","","",65,[[]]],[11,"default_value","","",65,[[]]],[11,"get_data_type","","",69,[[],["datatype",4]]],[11,"get_bit_width","","",69,[[]]],[11,"default_value","","",69,[[]]],[11,"get_data_type","","",87,[[],["datatype",4]]],[11,"get_bit_width","","",87,[[]]],[11,"default_value","","",87,[[]]],[11,"get_data_type","","",68,[[],["datatype",4]]],[11,"get_bit_width","","",68,[[]]],[11,"default_value","","",68,[[]]],[11,"get_data_type","","",71,[[],["datatype",4]]],[11,"get_bit_width","","",71,[[]]],[11,"default_value","","",71,[[]]],[11,"get_data_type","","",75,[[],["datatype",4]]],[11,"get_bit_width","","",75,[[]]],[11,"default_value","","",75,[[]]],[11,"get_data_type","","",66,[[],["datatype",4]]],[11,"get_bit_width","","",66,[[]]],[11,"default_value","","",66,[[]]],[11,"get_data_type","","",67,[[],["datatype",4]]],[11,"get_bit_width","","",67,[[]]],[11,"default_value","","",67,[[]]],[11,"get_data_type","","",79,[[],["datatype",4]]],[11,"get_bit_width","","",79,[[]]],[11,"default_value","","",79,[[]]],[11,"get_data_type","","",73,[[],["datatype",4]]],[11,"get_bit_width","","",73,[[]]],[11,"default_value","","",73,[[]]],[11,"get_data_type","","",63,[[],["datatype",4]]],[11,"get_bit_width","","",63,[[]]],[11,"default_value","","",63,[[]]],[11,"get_data_type","","",80,[[],["datatype",4]]],[11,"get_bit_width","","",80,[[]]],[11,"default_value","","",80,[[]]],[11,"get_data_type","","",84,[[],["datatype",4]]],[11,"get_bit_width","","",84,[[]]],[11,"default_value","","",84,[[]]],[11,"get_data_type","","",64,[[],["datatype",4]]],[11,"get_bit_width","","",64,[[]]],[11,"default_value","","",64,[[]]],[11,"get_data_type","","",86,[[],["datatype",4]]],[11,"get_bit_width","","",86,[[]]],[11,"default_value","","",86,[[]]],[11,"get_data_type","","",85,[[],["datatype",4]]],[11,"get_bit_width","","",85,[[]]],[11,"default_value","","",85,[[]]],[11,"get_data_type","","",70,[[],["datatype",4]]],[11,"get_bit_width","","",70,[[]]],[11,"default_value","","",70,[[]]],[11,"get_data_type","","",83,[[],["datatype",4]]],[11,"get_bit_width","","",83,[[]]],[11,"default_value","","",83,[[]]],[11,"get_data_type","","",78,[[],["datatype",4]]],[11,"get_bit_width","","",78,[[]]],[11,"default_value","","",78,[[]]],[11,"get_data_type","","",81,[[],["datatype",4]]],[11,"get_bit_width","","",81,[[]]],[11,"default_value","","",81,[[]]],[11,"get_data_type","","",72,[[],["datatype",4]]],[11,"get_bit_width","","",72,[[]]],[11,"default_value","","",72,[[]]],[11,"partial_cmp","polars::prelude","",92,[[["field",3]],[["ordering",4],["option",4]]]],[11,"lt","","",92,[[["field",3]]]],[11,"le","","",92,[[["field",3]]]],[11,"gt","","",92,[[["field",3]]]],[11,"ge","","",92,[[["field",3]]]],[11,"partial_cmp","polars::datatypes","",25,[[["dateunit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",26,[[["intervalunit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",23,[[["datatype",4]],[["ordering",4],["option",4]]]],[11,"lt","","",23,[[["datatype",4]]]],[11,"le","","",23,[[["datatype",4]]]],[11,"gt","","",23,[[["datatype",4]]]],[11,"ge","","",23,[[["datatype",4]]]],[11,"partial_cmp","","",27,[[["timeunit",4]],[["ordering",4],["option",4]]]],[11,"from","polars::prelude","",92,[[["field",3]],["field",3]]],[11,"eq","","",93,[[["schema",3]]]],[11,"ne","","",93,[[["schema",3]]]],[11,"eq","polars::datatypes","",26,[[["intervalunit",4]]]],[11,"eq","","",27,[[["timeunit",4]]]],[11,"eq","","",23,[[["datatype",4]]]],[11,"ne","","",23,[[["datatype",4]]]],[11,"eq","","",25,[[["dateunit",4]]]],[11,"eq","polars::prelude","",92,[[["field",3]]]],[11,"ne","","",92,[[["field",3]]]],[11,"serialize","polars::datatypes","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","polars::prelude","",93,[[],["result",4]]],[11,"serialize","","",92,[[],["result",4]]],[11,"serialize","polars::datatypes","",27,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"cmp","polars::prelude","",92,[[["field",3]],["ordering",4]]],[11,"cmp","polars::datatypes","",27,[[["timeunit",4]],["ordering",4]]],[11,"cmp","","",25,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",26,[[["intervalunit",4]],["ordering",4]]],[11,"cmp","","",23,[[["datatype",4]],["ordering",4]]],[11,"fmt","","",85,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",77,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",73,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",65,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",69,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",63,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",72,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",67,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",66,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",75,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",84,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",68,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::json","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",86,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",79,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",78,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",64,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",76,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",83,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",71,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",74,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",82,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","polars::frame::ser::csv","",90,[[],["writerbuilder",3]]],[11,"default","polars::frame::ser::json","",91,[[],["readerbuilder",3]]],[11,"default","polars::frame::ser::csv","",89,[[],["readerbuilder",3]]],[11,"hash","polars::datatypes","",25,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",26,[[]]],[11,"hash","polars::prelude","",92,[[]]],[11,"get_time_unit","polars::datatypes","",82,[[],["timeunit",4]]],[11,"get_time_unit","","",81,[[],["timeunit",4]]],[11,"get_time_unit","","",80,[[],["timeunit",4]]],[11,"get_time_unit","","",83,[[],["timeunit",4]]],[11,"deserialize","","",23,[[],[["datatype",4],["result",4]]]],[11,"deserialize","polars::prelude","",93,[[],[["schema",3],["result",4]]]],[11,"deserialize","polars::datatypes","",26,[[],[["result",4],["intervalunit",4]]]],[11,"deserialize","polars::prelude","",92,[[],[["field",3],["result",4]]]],[11,"deserialize","polars::datatypes","",25,[[],[["result",4],["dateunit",4]]]],[11,"deserialize","","",27,[[],[["result",4],["timeunit",4]]]],[11,"new","polars::series","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"sum","polars::chunked_array","Returns `None` if the array is empty or only contains null…",22,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",22,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",22,[[],["option",4]]],[11,"sum","polars","Returns `None` if the array is empty or only contains null…",94,[[],["option",4]]],[11,"min","","",94,[[],["option",4]]],[11,"max","","",94,[[],["option",4]]],[11,"apply","polars::chunked_array","Chooses the fastest path for closure application. Null…",22,[[]]],[11,"apply","polars","",94,[[]]],[11,"apply","","",95,[[]]],[11,"pow_f32","polars::chunked_array","",22,[[],["float32chunked",6]]],[11,"pow_f64","","",22,[[],["float64chunked",6]]],[11,"cast","","",22,[[],[["chunkedarray",3],["result",6]]]],[11,"cast","polars","",95,[[],[["chunkedarray",3],["result",6]]]],[11,"cast","","",94,[[],[["chunkedarray",3],["result",6]]]],[11,"rechunk","polars::chunked_array","",22,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",22,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","polars","",94,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",94,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","","",95,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",95,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"eq","polars::series","Create a boolean mask by checking for equality.",0,[[["series",4]],["booleanchunked",6]]],[11,"neq","","Create a boolean mask by checking for inequality.",0,[[["series",4]],["booleanchunked",6]]],[11,"gt","","Create a boolean mask by checking if lhs > rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq","","Create a boolean mask by checking if lhs >= rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"lt","","Create a boolean mask by checking if lhs < rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq","","Create a boolean mask by checking if lhs <= rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"eq","","",0,[[],["booleanchunked",6]]],[11,"neq","","",0,[[],["booleanchunked",6]]],[11,"gt","","",0,[[],["booleanchunked",6]]],[11,"gt_eq","","",0,[[],["booleanchunked",6]]],[11,"lt","","",0,[[],["booleanchunked",6]]],[11,"lt_eq","","",0,[[],["booleanchunked",6]]],[11,"eq","","",0,[[],["booleanchunked",6]]],[11,"neq","","",0,[[],["booleanchunked",6]]],[11,"gt","","",0,[[],["booleanchunked",6]]],[11,"gt_eq","","",0,[[],["booleanchunked",6]]],[11,"lt","","",0,[[],["booleanchunked",6]]],[11,"lt_eq","","",0,[[],["booleanchunked",6]]],[11,"eq","polars::chunked_array","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"neq","","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt","","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt_eq","","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt","","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt_eq","","",22,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq","polars","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"neq","","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt","","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt","","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",94,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"neq","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",95,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq","polars::chunked_array","",22,[[],["booleanchunked",6]]],[11,"neq","","",22,[[],["booleanchunked",6]]],[11,"gt","","",22,[[],["booleanchunked",6]]],[11,"gt_eq","","",22,[[],["booleanchunked",6]]],[11,"lt","","",22,[[],["booleanchunked",6]]],[11,"lt_eq","","",22,[[],["booleanchunked",6]]],[11,"eq","polars","",95,[[],["booleanchunked",6]]],[11,"neq","","",95,[[],["booleanchunked",6]]],[11,"gt","","",95,[[],["booleanchunked",6]]],[11,"gt_eq","","",95,[[],["booleanchunked",6]]],[11,"lt","","",95,[[],["booleanchunked",6]]],[11,"lt_eq","","",95,[[],["booleanchunked",6]]],[11,"take","polars::chunked_array","",22,[[["option",4]],["result",6]]],[11,"take_opt","","",22,[[["option",4]],["result",6]]],[11,"take","polars","",94,[[["option",4]],["result",6]]],[11,"take_opt","","",94,[[["option",4]],["result",6]]],[11,"take","","",95,[[["option",4]],["result",6]]],[11,"take_opt","","",95,[[["option",4]],["result",6]]],[11,"get","polars::chunked_array::take","",54,[[],["option",4]]],[11,"get_unchecked","","",54,[[]]],[11,"get","","",55,[[],["option",4]]],[11,"get_unchecked","","",55,[[]]],[11,"get","","",56,[[],["option",4]]],[11,"get_unchecked","","",56,[[]]],[11,"get","","",57,[[],["option",4]]],[11,"get_unchecked","","",57,[[]]],[11,"get","","",58,[[],["option",4]]],[11,"get_unchecked","","",58,[[]]],[11,"get","","",59,[[],["option",4]]],[11,"get_unchecked","","",59,[[]]],[11,"get","","",60,[[],["option",4]]],[11,"get_unchecked","","",60,[[]]],[11,"unique","polars::chunked_array","",22,[[]]],[11,"arg_unique","","",22,[[],["vec",3]]],[11,"unique","polars","",95,[[]]],[11,"arg_unique","","",95,[[],["vec",3]]],[11,"unique","","",94,[[]]],[11,"arg_unique","","",94,[[],["vec",3]]],[11,"value_counts","polars::chunked_array","",22,[[],[["option",4],["buildhasherdefault",3],["hashmap",3]]]],[11,"downcast_chunks","","",22,[[],[["vec",3],["primitivearray",3]]]],[11,"downcast_chunks","polars","",95,[[],[["stringarray",3],["vec",3]]]],[11,"downcast_chunks","","",94,[[],[["vec",3],["booleanarray",6]]]],[11,"sort","polars::chunked_array","",22,[[],["chunkedarray",3]]],[11,"sort_in_place","","",22,[[]]],[11,"argsort","","",22,[[],["vec",3]]],[11,"sort","polars","",95,[[],["utf8chunked",6]]],[11,"sort_in_place","","",95,[[]]],[11,"argsort","","",95,[[],["vec",3]]],[11,"sort","","",94,[[],["booleanchunked",6]]],[11,"sort_in_place","","",94,[[]]],[11,"argsort","","",94,[[],["vec",3]]],[11,"full","polars::chunked_array","",22,[[]]],[11,"full","polars","",95,[[]]],[11,"reverse","polars::chunked_array","",22,[[],["chunkedarray",3]]],[11,"reverse","polars","",94,[[]]],[11,"reverse","","",95,[[]]],[11,"get_data_type","polars::datatypes","",88,[[],["arrowdatatype",4]]],[11,"to_str","","",23,[[]]],[11,"hash_join_inner","polars::chunked_array","",22,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_left","","",22,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_outer","","",22,[[["chunkedarray",3]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"hash_join_inner","polars","",94,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_left","","",94,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_outer","","",94,[[["booleanchunked",6]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"hash_join_inner","","",95,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_left","","",95,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_outer","","",95,[[["utf8chunked",6]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"new","polars::frame::ser::csv","Create a new CsvReader from a file/ stream",37,[[]]],[11,"set_rechunk","","Rechunk to one contiguous chunk of memory after all data…",37,[[]]],[11,"finish","","Read the file and create the DataFrame.",37,[[],[["result",6],["dataframe",3]]]],[11,"new","polars::frame::ser::json","",38,[[]]],[11,"set_rechunk","","",38,[[]]],[11,"finish","","",38,[[],[["result",6],["dataframe",3]]]],[11,"as_mut","polars::series","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","polars::chunked_array","",22,[[],["chunkedarray",3]]],[11,"from","polars::error","",31,[[["arrowerror",4]]]],[11,"from","polars::series","",0,[[["chunkedarray",3],["uint8type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["uint16type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["uint32type",3]],["series",4]]],[11,"from","","",0,[[["uint64type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["int8type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["int16type",3]],["series",4]]],[11,"from","","",0,[[["int32type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["int64type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["float32type",3]],["series",4]]],[11,"from","","",0,[[["float64type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["utf8type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["booleantype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["date32type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["date64type",3]],["series",4]]],[11,"from","","",0,[[["time32millisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["time32secondchunked",6]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["time64nanosecondtype",3]],["series",4]]],[11,"from","","",0,[[["time64microsecondtype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["durationnanosecondtype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["durationmicrosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["durationmillisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["durationsecondchunked",6]],["series",4]]],[11,"from","","",0,[[["intervaldaytimechunked",6]],["series",4]]],[11,"from","","",0,[[["intervalyearmonthchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampnanosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampmicrosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampmillisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampsecondchunked",6]],["series",4]]],[11,"next_back","polars::chunked_array::iterator","",42,[[],["option",4]]],[11,"next_back","","",43,[[],["option",4]]],[11,"next_back","","",44,[[],["option",4]]],[11,"next_back","","",45,[[],["option",4]]],[11,"next_back","","",46,[[],["option",4]]],[11,"next_back","","",47,[[],["option",4]]],[11,"next_back","","",48,[[],["option",4]]],[11,"next_back","","",49,[[],["option",4]]],[11,"next_back","","",50,[[],["option",4]]],[11,"next_back","","",51,[[],["option",4]]],[11,"next_back","","",52,[[],["option",4]]],[11,"next_back","","",53,[[],["option",4]]],[11,"next","","",42,[[],["option",4]]],[11,"size_hint","","",42,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"size_hint","","",43,[[]]],[11,"next","","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"next","","",45,[[],["option",4]]],[11,"size_hint","","",45,[[]]],[11,"next","","",46,[[],["option",4]]],[11,"size_hint","","",46,[[]]],[11,"next","","",47,[[],["option",4]]],[11,"size_hint","","",47,[[]]],[11,"next","","",48,[[],["option",4]]],[11,"size_hint","","",48,[[]]],[11,"next","","",49,[[],["option",4]]],[11,"size_hint","","",49,[[]]],[11,"next","","",50,[[],["option",4]]],[11,"size_hint","","",50,[[]]],[11,"next","","",51,[[],["option",4]]],[11,"size_hint","","",51,[[]]],[11,"next","","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"next","","",53,[[],["option",4]]],[11,"size_hint","","",53,[[]]],[11,"clone","polars::series","",0,[[],["series",4]]],[11,"clone","polars::chunked_array","",22,[[]]],[11,"clone","polars::frame::group_by","",32,[[],["groupby",3]]],[11,"clone","polars::frame","",33,[[],["dataframe",3]]],[11,"eq","polars::datatypes","",28,[[["anytype",4]]]],[11,"ne","","",28,[[["anytype",4]]]],[11,"deref","polars::chunked_array::builder","",5,[[]]],[11,"deref","","",6,[[]]],[11,"deref","polars::datatypes","",88,[[]]],[11,"deref_mut","polars::chunked_array::builder","",5,[[]]],[11,"deref_mut","","",6,[[]]],[11,"deref_mut","polars::datatypes","",88,[[]]],[11,"fmt","polars::chunked_array","",22,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",28,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",31,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",0,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",33,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame::group_by","",32,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",31,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",0,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",33,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",28,[[["formatter",3]],["result",6]]],[11,"div","polars::series","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","polars::chunked_array","",22,[[]]],[11,"sub","polars::series","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","polars::chunked_array","",22,[[]]],[11,"add","polars::series","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","polars::chunked_array","",22,[[]]],[11,"mul","polars::series","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","polars::chunked_array","",22,[[]]],[11,"from_iter","polars::series","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",22,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array::builder","",7,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",22,[[["intoiterator",8]]]],[11,"from_iter","polars","",94,[[["intoiterator",8]]]],[11,"from_iter","","",95,[[["intoiterator",8]]]],[11,"from_iter","","",95,[[["intoiterator",8]]]],[11,"from_iter","","",95,[[["intoiterator",8]]]],[11,"from_iter","","",95,[[["intoiterator",8]]]],[11,"from_iter","","",95,[[["intoiterator",8]]]],[11,"try_into","polars::series","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["time32millisecondchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["time32secondchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["durationmicrosecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["durationmillisecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["durationsecondchunked",6]]]],[11,"try_into","","",0,[[],[["intervaldaytimechunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["intervalyearmonthchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["timestampnanosecondchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["timestampmicrosecondchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["timestampmillisecondchunked",6]]]],[11,"try_into","","",0,[[],[["timestampsecondchunked",6],["result",4]]]],[11,"source","polars::error","",31,[[],[["option",4],["error",8]]]],[11,"from_par_iter","polars::chunked_array","",22,[[["intoparalleliterator",8]]]],[11,"from_par_iter","polars","",94,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",95,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",95,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",95,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",95,[[["intoparalleliterator",8]]]],[11,"new_utf8_from_slice","polars::datatypes","",95,[[]]],[11,"new_utf8_from_opt_slice","","",95,[[]]],[11,"to_json","","Generate a JSON representation of the data type",23,[[],["value",4]]],[11,"new","polars::frame::ser::csv","Create a new builder for configuring CSV parsing options.",89,[[],["readerbuilder",3]]],[11,"with_schema","","Set the CSV file\'s schema",89,[[["arc",3],["schema",3]],["readerbuilder",3]]],[11,"has_header","","Set whether the CSV file has headers",89,[[],["readerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",89,[[],["readerbuilder",3]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",89,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",89,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",89,[[["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",89,[[],[["result",4],["reader",3],["arrowerror",4]]]],[11,"new","","Create a new builder for configuring CSV writing options.",90,[[],["writerbuilder",3]]],[11,"has_headers","","Set whether to write headers",90,[[],["writerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",90,[[],["writerbuilder",3]]],[11,"with_date_format","","Set the CSV file\'s date format",90,[[["string",3]],["writerbuilder",3]]],[11,"with_time_format","","Set the CSV file\'s time format",90,[[["string",3]],["writerbuilder",3]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",90,[[["string",3]],["writerbuilder",3]]],[11,"build","","Create a new `Writer`",90,[[],["writer",3]]],[11,"new","polars::frame::ser::json","Create a new builder for configuring JSON parsing options.",91,[[],["readerbuilder",3]]],[11,"with_schema","","Set the JSON file\'s schema",91,[[["arc",3],["schema",3]],["readerbuilder",3]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",91,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",91,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",91,[[["string",3],["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",91,[[],[["reader",3],["arrowerror",4],["result",4]]]],[11,"new","polars::prelude","Creates a new field",92,[[["datatype",4]],["field",3]]],[11,"new_dict","","Creates a new field",92,[[["datatype",4]],["field",3]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",92,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",92,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",92,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",92,[[["value",4]],[["field",3],["arrowerror",4],["result",4]]]],[11,"to_json","","Generate a JSON representation of the `Field`",92,[[],["value",4]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",92,[[["field",3]],[["arrowerror",4],["result",4]]]],[11,"empty","","Creates an empty `Schema`",93,[[],["schema",3]]],[11,"new","","Creates a new `Schema` from a sequence of `Field` values",93,[[["field",3],["vec",3]],["schema",3]]],[11,"new_with_metadata","","Creates a new `Schema` from a sequence of `Field` values…",93,[[["field",3],["vec",3],["hashmap",3],["string",3],["randomstate",3]],["schema",3]]],[11,"try_merge","","Merge schema into self if it is compatible. Struct fields…",93,[[],[["schema",3],["arrowerror",4],["result",4]]]],[11,"fields","","Returns an immutable reference of the vector of `Field`…",93,[[],["vec",3]]],[11,"field","","Returns an immutable reference of a specific `Field`…",93,[[],["field",3]]],[11,"field_with_name","","Returns an immutable reference of a specific `Field`…",93,[[],[["result",4],["arrowerror",4],["field",3]]]],[11,"index_of","","Find the index of the column with the given name",93,[[],[["arrowerror",4],["result",4]]]],[11,"metadata","","Returns an immutable reference to the Map of custom…",93,[[],["hashmap",3]]],[11,"column_with_name","","Look up a column by name and return a immutable reference…",93,[[],["option",4]]],[11,"to_json","","Generate a JSON representation of the `Schema`",93,[[],["value",4]]],[11,"from","","Parse a `Schema` definition from a JSON representation",93,[[["value",4]],[["schema",3],["arrowerror",4],["result",4]]]]],"p":[[4,"Series"],[8,"NamedFrom"],[8,"Agg"],[8,"Apply"],[8,"Pow"],[3,"PrimitiveChunkedBuilder"],[3,"Utf8ChunkedBuilder"],[3,"AlignedVec"],[8,"AlignedAlloc"],[8,"ChunkCast"],[8,"ChunkOps"],[8,"CmpOps"],[8,"Take"],[8,"TakeIndex"],[8,"IntoTakeRandom"],[8,"TakeRandom"],[8,"Unique"],[8,"ValueCounts"],[8,"Downcast"],[8,"ChunkSort"],[8,"ChunkFull"],[8,"Reverse"],[3,"ChunkedArray"],[4,"ArrowDataType"],[8,"ArrowPrimitiveType"],[4,"DateUnit"],[4,"IntervalUnit"],[4,"TimeUnit"],[4,"AnyType"],[8,"PolarsDataType"],[8,"ToStr"],[4,"PolarsError"],[3,"GroupBy"],[3,"DataFrame"],[8,"HashJoin"],[8,"Selection"],[3,"CsvWriter"],[3,"CsvReader"],[3,"JsonReader"],[8,"SerReader"],[8,"ArrowReader"],[8,"LhsNumOps"],[3,"NumIterSingleChunkNullCheck"],[3,"NumIterSingleChunk"],[3,"NumIterManyChunk"],[3,"NumIterManyChunkNullCheck"],[3,"Utf8IterSingleChunk"],[3,"Utf8IterSingleChunkNullCheck"],[3,"Utf8IterManyChunk"],[3,"Utf8IterManyChunkNullCheck"],[3,"BooleanIterSingleChunk"],[3,"BooleanIterSingleChunkNullCheck"],[3,"BooleanIterManyChunk"],[3,"BooleanIterManyChunkNullCheck"],[3,"NumTakeRandomChunked"],[3,"NumTakeRandomCont"],[3,"NumTakeRandomSingleChunk"],[3,"Utf8TakeRandom"],[3,"Utf8TakeRandomSingleChunk"],[3,"BoolTakeRandom"],[3,"BoolTakeRandomSingleChunk"],[3,"BooleanType"],[3,"Date32Type"],[3,"Date64Type"],[3,"DurationMicrosecondType"],[3,"DurationMillisecondType"],[3,"DurationNanosecondType"],[3,"DurationSecondType"],[3,"Float32Type"],[3,"Float64Type"],[3,"Int16Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"Int8Type"],[3,"IntervalDayTimeType"],[3,"IntervalYearMonthType"],[3,"Time32MillisecondType"],[3,"Time32SecondType"],[3,"Time64MicrosecondType"],[3,"Time64NanosecondType"],[3,"TimestampMicrosecondType"],[3,"TimestampMillisecondType"],[3,"TimestampNanosecondType"],[3,"TimestampSecondType"],[3,"UInt16Type"],[3,"UInt32Type"],[3,"UInt64Type"],[3,"UInt8Type"],[3,"Utf8Type"],[3,"ReaderBuilder"],[3,"WriterBuilder"],[3,"ReaderBuilder"],[3,"Field"],[3,"Schema"],[6,"BooleanChunked"],[6,"Utf8Chunked"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);